#!/usr/bin/perl

use utf8;
use warnings;
use strict;
use Data::Dumper;
use Cwd qw(abs_path);
use POSIX qw(strftime);
my ($basedir, $path);
BEGIN {
	# Get the real base directory for this script
	($basedir, $path) = abs_path($0) =~ m{(.*/)?([^/]+)$};
}
use lib $basedir."../lib/";	# Custom functions
require "lib.pl";

my ($lookup,@rows,$r,$splits,$id,$oldid,@sorted,$i,@ids,$wagefile,$oldwages,$wages,$url,$tfile,$y,$csv,$syear,$eyear,$fh,$ofile,$parl10,$parl24,$oldhex,$jsonfile,$json);

$wagefile = $basedir."../../src/themes/economy/wages/_data/wages.csv";
$ofile = $basedir."../../src/themes/economy/wages/_data/release/wages.csv";
$jsonfile = $basedir."../../src/themes/economy/wages/_data/wages.json";
$oldwages = LoadCSV($wagefile,{'key'=>'geography_code'});
$url = "https://www.nomisweb.co.uk/api/v01/dataset/NM_30_1.data.csv?geography=721420327,721420332,721420333,721420399,721420409,721420416,721420437,721420470,721420498,721420511,721420521,721420533,721420593,721420594,721420603...721420605,721420608,721420615,721420623,721420666,721420718,721420744,721420745,721420757,721420783,721420793,721420291,721420296,721420302,721420317,721420328...721420331,721420336...721420339,721420368,721420370,721420371,721420378,721420384,721420389,721420390,721420396,721420404,721420411,721420448,721420468,721420477,721420503,721420512,721420525,721420543,721420544,721420555,721420563...721420567,721420573,721420576,721420578...721420580,721420587,721420598,721420641,721420642,721420648,721420650,721420659,721420669,721420672,721420676,721420681,721420685,721420689,721420717,721420730,721420735,721420736,721420741,721420743,721420754,721420765,721420787,721420790,721420791,721420803,721420806,721420809...721420811,721420815,721420824,721420828,721420300,721420301,721420313,721420344...721420346,721420353,721420354,721420373,721420403,721420422,721420424...721420426,721420476,721420481,721420488,721420495,721420523,721420534,721420539...721420541,721420545...721420551,721420609,721420644,721420649,721420654,721420662,721420670,721420677,721420678,721420687,721420688,721420690,721420692...721420696,721420698,721420701,721420732,721420770,721420786,721420808,721420830,721420831,721420292,721420294,721420305,721420335,721420340,721420366,721420391,721420405,721420418...721420421,721420454,721420469,721420471,721420479,721420492,721420513,721420514,721420537,721420552...721420554,721420562,721420568,721420569,721420581,721420583,721420588,721420590,721420601,721420617,721420630,721420632,721420633,721420636...721420638,721420683,721420684,721420697,721420702,721420709,721420713,721420714,721420716,721420797,721420290,721420318...721420326,721420364,721420369,721420376,721420406...721420408,721420429,721420430,721420487,721420507,721420535,721420542,721420561,721420584,721420606,721420621,721420624,721420626,721420639,721420667,721420679,721420699,721420704,721420705,721420719,721420739,721420740,721420746...721420750,721420752,721420761,721420764,721420767,721420769,721420773,721420788,721420792,721420800,721420805,721420820...721420823,721420827,721420303,721420310,721420347,721420351,721420362,721420365,721420372,721420375,721420380,721420382,721420385,721420400,721420402,721420432,721420450,721420452,721420482,721420493,721420494,721420499,721420504,721420509,721420510,721420515,721420524,721420528,721420570...721420572,721420577,721420585,721420591,721420610,721420616,721420619,721420622,721420627,721420628,721420631,721420634,721420635,721420651,721420663,721420706,721420707,721420715,721420720,721420722,721420723,721420727,721420728,721420733,721420738,721420742,721420756,721420772,721420794,721420795,721420799,721420804,721420816,721420299,721420307,721420309,721420311,721420312,721420315,721420348...721420350,721420363,721420379,721420386,721420393,721420395,721420398,721420401,721420412...721420415,721420431,721420433...721420435,721420439,721420447,721420449,721420451,721420455,721420462,721420464,721420483,721420485,721420486,721420490,721420491,721420496,721420497,721420502,721420505,721420516,721420518,721420519,721420526,721420527,721420531,721420532,721420536,721420538,721420557...721420560,721420597,721420640,721420643,721420647,721420656,721420660,721420661,721420671,721420674,721420680,721420729,721420751,721420753,721420760,721420776,721420779,721420782,721420784,721420785,721420789,721420802,721420812,721420289,721420293,721420295,721420297,721420298,721420304,721420308,721420314,721420316,721420334,721420343,721420355,721420356,721420367,721420377,721420383,721420388,721420392,721420410,721420417,721420423,721420427,721420428,721420436,721420438,721420440...721420442,721420444...721420446,721420453,721420456,721420459...721420461,721420465,721420472,721420475,721420478,721420480,721420484,721420489,721420500,721420501,721420506,721420508,721420520,721420522,721420529,721420530,721420556,721420574,721420575,721420586,721420592,721420595,721420596,721420599,721420600,721420602,721420618,721420629,721420645,721420646,721420657,721420658,721420664,721420665,721420668,721420673,721420675,721420682,721420691,721420700,721420703,721420725,721420726,721420731,721420758,721420759,721420775,721420781,721420796,721420813,721420814,721420817...721420819,721420825,721420826,721420306,721420341,721420342,721420352,721420357...721420361,721420374,721420381,721420387,721420394,721420397,721420443,721420457,721420458,721420463,721420466,721420467,721420473,721420474,721420517,721420582,721420589,721420607,721420611...721420614,721420620,721420625,721420652,721420653,721420655,721420686,721420708,721420710...721420712,721420721,721420724,721420734,721420737,721420755,721420762,721420763,721420766,721420768,721420771,721420774,721420777,721420778,721420780,721420798,721420801,721420807,721420829,721420832...721420920&date=2023-latest&sex=8&item=2&pay=7&measures=20100,20701&select=DATE,DATE_NAME,GEOGRAPHY_CODE,GEOGRAPHY_NAME,ITEM_NAME,MEASURES_NAME,OBS_VALUE";
$tfile = $basedir."../../raw-data/economy/NM_30_1.csv";
$syear = 2010;

# Get the 2010 hexes
$oldhex = LoadJSON($basedir."../../src/_data/hexjson/constituencies.hexjson");


# Get the population splits from 2010 constituencies to 2024 constituencies (index by 2024)
$lookup = LoadCSV($basedir."../../lookups/ukparl.2025.csv",{'key'=>'UKPARL.2025'});
@rows = LoadCSV($basedir."../../lookups/PARL10_PARL25_combo_overlap.csv");
for($r = 0; $r < @rows; $r++){
	$rows[$r]{'PCON10CD'} = $rows[$r]{'PARL10'};
	$rows[$r]{'PCON24CD'} = $lookup->{$rows[$r]{'PARL25'}}{'PCON24CD'};
	$parl10 = $rows[$r]{'PARL10'};
	$parl24 = $lookup->{$rows[$r]{'PARL25'}}{'PCON24CD'};
	if(defined($parl10) && defined($parl24)){
		if(!defined($splits->{$parl24})){
			$splits->{$parl24} = {};
		}
		$splits->{$parl24}{$parl10} = ($rows[$r]{'percentage_overlap_pop'} || 0) + 0;
	}
}

# Get the NOMIS output
SaveFromURL($url,$tfile);
@rows = LoadCSV($tfile);
for($r = 0; $r < @rows; $r++){
	$id = $rows[$r]{'GEOGRAPHY_CODE'};
	if(!defined($wages->{$id})){
		$wages->{$id} = {'name'=>$rows[$r]{'GEOGRAPHY_NAME'}};
	}
	if($rows[$r]{'MEASURES_NAME'} eq "Value"){
		$wages->{$id}{$rows[$r]{'DATE'}} = $rows[$r]{'OBS_VALUE'};
		if($rows[$r]{'DATE'} > $eyear){ $eyear = $rows[$r]{'DATE'}; }
	}
}

# Loop over the new wages and find the best match old wages
foreach $id (sort(keys(%{$wages}))){
	@sorted = reverse(sort { $splits->{$id}{$a} <=> $splits->{$id}{$b} } (keys(%{$splits->{$id}})));
	$oldid = $sorted[0];
	for($y = $syear; $y <= 2023; $y++){
		$wages->{$id}{$y} = $oldwages->{$oldid}{$y};
	}
	$wages->{$id}{'old'} = $oldid;
}


$csv = "PCON24CD,PCON24NM,PCON10CD,PCON10NM";
for($y = $syear; $y <= $eyear; $y++){
	$csv .= ",$y";
}
$csv .= "\n";
foreach $id (sort(keys(%{$wages}))){
	$csv .= "$id,\"$wages->{$id}{'name'}\",$wages->{$id}{'old'}";
	$csv .= ",\"$oldhex->{'hexes'}{$wages->{$id}{'old'}}{'n'}\"";
	for($y = $syear; $y <= $eyear; $y++){
		$csv .= ",".($wages->{$id}{$y}||"");
	}
	$csv .= "\n";
}

msg("Saving to <cyan>$ofile<none>\n");
open($fh,">",$ofile);
print $fh $csv;
close($fh);

$json = LoadJSON($jsonfile);
$json->{'date'} = $eyear;
$json->{'config'}{'value'} = $eyear;
$json->{'config'}{'tools'}{'slider'}{'columns'} = ();
for($y = $syear; $y <= $eyear; $y++){
	$json->{'units'}{$y} = {'value'=>'GBP','category'=>'currency'};
	push(@{$json->{'config'}{'tools'}{'slider'}{'columns'}},$y."");
}
SaveJSON($json,$jsonfile,2);
